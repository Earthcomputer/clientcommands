import net.fabricmc.loom.task.RemapJarTask

plugins {
	id 'fabric-loom' version '0.8-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft {
	accessWidener 'src/main/resources/clientcommands.aw'
}

// TODO: better solution
def clientcommandsScriptingExists = file('../clientcommands-scripting/build/libs').exists()
if (clientcommandsScriptingExists) {
	clientcommandsScriptingExists = Arrays.asList(file('../clientcommands-scripting/build/libs').list()).stream().anyMatch() {
		it.endsWith("${project.scripting_version}.jar")
	}
}

configurations.include {
	// Check for updates every build
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

repositories {
	if (clientcommandsScriptingExists) {
		flatDir {
			dirs '../clientcommands-scripting/build/libs'
		}
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation 'net.earthcomputer.multiconnect:multiconnect-api:1.3.36'
	include 'net.earthcomputer.multiconnect:multiconnect-api:1.3.36'

	if (clientcommandsScriptingExists) {
		include("net.earthcomputer.clientcommands:clientcommands-scripting:${project.scripting_version}") {
			changing = true
		}
	}
}

processResources {
	inputs.property "version", project.version

	duplicatesStrategy DuplicatesStrategy.WARN

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

remapJar {
	inputs.property 'scriptingExists', clientcommandsScriptingExists
	if (clientcommandsScriptingExists) {
		inputs.dir '../clientcommands-scripting/build/libs'
	}
}

task remapSlimJar(type: RemapJarTask, dependsOn: jar) {
	input = jar.archiveFile
	classifier = 'slim'
	addNestedDependencies = false
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(jar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	repositories {
		// mavenLocal()
	}
}
