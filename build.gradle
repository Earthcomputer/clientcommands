plugins {
	id 'fabric-loom' version '0.11-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven {
		url = 'https://maven.xpple.dev/maven2'
	}
}

loom {
	accessWidenerPath = file('src/main/resources/clientcommands.aw')
}

def clientcommandsScriptingExists = findProject(':clientcommands-scripting') != null
subprojects {
	afterEvaluate {
		dependencies {
			implementation project(':')
		}
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation('net.earthcomputer.multiconnect:multiconnect-api:1.5.10') {
		transitive = false
	}
	include('net.earthcomputer.multiconnect:multiconnect-api:1.5.10') {
		transitive = false
	}

	modImplementation 'dev.xpple:clientarguments:1.3.0'
	include 'dev.xpple:clientarguments:1.3.0'

	if (clientcommandsScriptingExists) {
		include project(':clientcommands-scripting')
	}
}

processResources {
	inputs.property "version", project.version

	duplicatesStrategy DuplicatesStrategy.WARN

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(jar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	repositories {
		// mavenLocal()
	}
}
